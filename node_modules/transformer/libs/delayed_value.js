var Util = require('./myutils'),
MultiWait = require('./multiwait'),
Emitter = require('events').EventEmitter

function DelayedValue(event) {
	Emitter.call(this)

	var self = this
	
	if (event) {
		// If an event is passed, it wraps the event.
		if (typeof(event.on) !== 'function') {
			throw("Wrong event for DelayedValue: " + event)
		}
		event.on('ready', function(result) {
			self.value(result)
		})
		this.event = event
	}
}
Util.inherits(DelayedValue, Emitter)

DelayedValue.prototype.flatten = function() {
	return this.result
}

DelayedValue.prototype.on = function() {
	Emitter.prototype.on.apply(this, arguments)
	if (this.result) {
		this.emit('ready', this.result)
	}
}

DelayedValue.prototype.value = function(result) {
	this.result = result
	this.emit('ready', result)
	
}

module.exports = DelayedValue
