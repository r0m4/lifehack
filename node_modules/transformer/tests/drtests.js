#!/usr/bin/env node

var Jstest = require('./jstest'),
Util = require('util'),
FS = require('fs'),
Path = require('path'),
EventEmitter = require('events').EventEmitter,
DelayedResponse = require('../libs/delayed_response'),
DelayedValue = require('../libs/delayed_value')

//View.debug.enable()

var Tests = function() {
	Jstest.call(this)
}
Util.inherits(Tests, Jstest)

Tests.prototype.test1 = function() {
	var dr = new DelayedResponse
	dr.push('aaa')
	dr.push('bbb')
	dr.push('ccc')
	var output = dr.flatten()
	var verify = 'aaabbbccc'
	this.assertEquals('test1', output, verify, 'output', 'verify')
	this.next()
}

Tests.prototype.test2 = function() {
	var dr = new DelayedResponse
	var output = dr.flatten()
	var verify = ''
	this.assertEquals('test2', output, verify, 'output', 'verify')
	this.next()
}

Tests.prototype.test3 = function() {
	var dr = new DelayedResponse
	var dr2 = new DelayedResponse
	var dr3 = new DelayedResponse

	dr.push('aaa')
	dr.push('bbb')
	dr.push(dr2)
	dr.push('ccc')
	
	dr2.push('zzz')
	dr2.push('yyy')

	dr3.push('123')
	
	var output = dr.flatten()
	var verify = 'aaabbbzzzyyyccc'
	this.assertEquals('test3.1', output, verify, 'output', 'verify')

	dr = new DelayedResponse
	dr.push(dr2)
	output = dr.flatten()
	verify = 'zzzyyy'
	this.assertEquals('test3.2', output, verify, 'output', 'verify')

	dr.push('aaa')
	dr.push('bbb')
	output = dr.flatten()
	verify = 'zzzyyyaaabbb'
	this.assertEquals('test3.3', output, verify, 'output', 'verify')

	dr.unshift(dr3)
	output = dr.flatten()
	verify = '123zzzyyyaaabbb'
	this.assertEquals('test3.3', output, verify, 'output', 'verify')

	this.next()
}

Tests.prototype.test4 = function() {
	var self = this
	var dr = new DelayedResponse
	var event = new EventEmitter
	dr.push('aaa')
	dr.push('bbb')
	dr.push(event)
	dr.push('ccc')
	dr.on('ready', function(output) {
		var verify = 'aaabbbxyzccc'
		self.assertEquals('test4', output, verify, 'output', 'verify')
		self.next()
	})
	setTimeout(function() {
		event.emit('ready', 'xyz')
	}, 1000)
}

/* Nested delayed value */
Tests.prototype.test_dv1 = function() {
	var self = this
	var e = new EventEmitter
	var dv = new DelayedValue(e)
	var data = "This output is delayed"
	dv.on('ready', function(output) {
		var verify = data
		self.assertEquals('test_dv1', output, verify)
		self.next()
	})
	setTimeout(function() {
		e.emit('ready', data)
	}, 100)
}

Tests.prototype.test_dv2 = function() {
	var self = this
	var e = new EventEmitter
	var dv = new DelayedValue(e)
	var data = "This output is NOT delayed"
	e.emit('ready', data)
	dv.on('ready', function(output) {
		var verify = data
		self.assertEquals('test_dv2', output, verify)
		self.next()
	})
}

Tests.prototype.test_dv3 = function() {
	var self = this
	var dv = new DelayedValue()
	var data = "Without using events"
	dv.on('ready', function(output) {
		var verify = data
		self.assertEquals('test_dv3', output, verify)
		self.next()
	})
	setTimeout(function() {
		dv.value(data)
	}, 100)
}

Tests.prototype.test_dv4 = function() {
	var self = this
	var dv = new DelayedValue()
	var data = "Without using events, without delay"
	dv.value(data)
	dv.on('ready', function(output) {
		var verify = data
		self.assertEquals('test_dv4', output, verify)
		self.next()
	})
}

/* Nested delayed response */
Tests.prototype.test_delayed0 = function() {
	var self = this
	var dr    = new DelayedResponse
	var dr2 = new DelayedResponse

	var e1 = new EventEmitter
	var e2 = new EventEmitter

	dr2.push('abc')
	dr2.push(e2)
	dr2.push('def')

	dr.push('a1')
	dr.push(e1)
	dr.push('a2')
	dr.push(dr2)


	dr.on('ready', function(result) {
		var verify = 'a1e1a2abce2def'
		self.assertEquals('test_delayed0.2', result, verify)
		self.next()
	})

	setTimeout(function() {
		e1.emit('ready', 'e1')
	}, 500)

	setTimeout(function() {
		e2.emit('ready', 'e2')
	}, 1000)
}

Tests.prototype.test_delayed1 = function() {
	var self = this
	var dr    = new DelayedResponse
	var dr1_1 = new DelayedResponse
	var dr1_2 = new DelayedResponse
	var dr2_1 = new DelayedResponse
	var dr2_2 = new DelayedResponse
	var dr3_1 = new DelayedResponse
	var dr3_2 = new DelayedResponse
	var dr3_3 = new DelayedResponse
	
	dr.push('a1')
	dr.push('a2')
	dr.push(dr1_1)
	dr.push('a3')
	dr.push(dr1_2)

	dr1_1.push('b1')
	dr1_1.push(dr2_1)

	dr1_2.push(dr2_2)
	dr1_2.push('b2')
	dr1_2.push('b4')

	dr2_1.push(dr3_1)
	dr2_2.push('c1')
	dr2_1.push(dr3_2)
	dr2_1.push(dr3_3)

	dr3_1.push('d1')
	// leave dr3_2 empty
	dr3_3.push('d2')
	dr3_3.push('d3')
	dr3_3.push('d4')
	dr3_3.push('d5')

	dr.on('ready', function(result) {
		var verify = 'a1a2b1d1d2d3d4d5a3c1b2b4'
		self.assertEquals('test_delayed1', result, verify)
		self.next()
	})
}

/* Nested delayed response with delayed values*/
Tests.prototype.test_delayed2 = function() {
	var self = this
	var dr    = new DelayedResponse
	var dr1_1 = new DelayedResponse
	var dr1_2 = new DelayedResponse
	var dr2_1 = new DelayedResponse
	var dr2_2 = new DelayedResponse
	var dr3_1 = new DelayedResponse
	var dr3_2 = new DelayedResponse
	var dr3_3 = new DelayedResponse
	
	var e0 = new EventEmitter
	var e1 = new EventEmitter
	var e2 = new EventEmitter
	var e3 = new EventEmitter
	var e4 = new EventEmitter

	dr.push('a1')
	dr.push(e0)
	dr.push('a2')
	dr.push(dr1_1)
	dr.push('a3')
	dr.push(dr1_2)

	dr1_1.push('b1')
	dr1_1.push(e1)
	dr1_1.push(dr2_1)

	dr1_2.push(dr2_2)
	dr1_2.push('b2')
	dr1_2.push('b4')
	dr1_2.push(e2)

	dr2_1.push(dr3_1)
	dr2_1.push(dr3_2)
	dr2_1.push(dr3_3)

	dr2_2.push('c1')
	dr2_2.push(e3)

	dr3_1.push('d1')
	// leave dr3_2 empty
	dr3_3.push('d2')
	dr3_3.push('d3')
	dr3_3.push(e4)
	dr3_3.push('d4')
	dr3_3.push('d5')

	e0.emit('ready', 'e0')
	e1.emit('ready', 'e1')

	dr.on('ready', function(result) {
		var verify = 'a1e0a2b1e1d1d2d3e4d4d5a3c1e3b2b4e2'
		self.assertEquals('test_delayed2', result, verify)
		self.next()
	})

	function emitevent(timeout, event, value) {
		setTimeout(function() {
			event.emit('ready', value)
		}, timeout)
	}

	emitevent(300, e2, 'e2')
	emitevent(400, e3, 'e3')
	emitevent(500, e4, 'e4')
}

/* -----------bootstrapping the testcases --------*/
process.argv.shift()
process.argv.shift()
//Transformer.debug.enable('info')
var tests = new Tests()
//tests.showPass = true
tests.start(process.argv)

if (!tests.finished)
	sleepUntil(tests, 'finish')

